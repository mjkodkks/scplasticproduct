---
import Container from "@components/container.astro";
import Sectionhead from "@components/home/sectionhead.astro";
import Layout from "@layouts/Layout.astro";
import { Image, getImage } from "astro:assets";

const imagesProject = await import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/project/*.{jpeg,jpg,png,gif}"
);

const path = "/src/assets/project/";

const projects: {
  title: string;
  description: string;
  image: ImageMetadata;
}[] = [
  {
    title: "Pall ring media",
    description:
      "สำหรับระบบบำบัดน้ำเสีย โครงการโรบินสันกลาง จังหวัดภูเก็ต จำนวน 200,000 ชิ้น",
    image: (await imagesProject[path + "pal_ring_media.jpg"]()).default,
  },
  {
    title: "Cross flow media",
    description:
      "ใช้ในระบบบำบัดน้ำเสีย โครงการ นิคมอุตสาหกรรมโรจน จ 2 โครงการ 8",
    image: (await imagesProject[path + "cross_flow_media.jpg"]()).default,
  },
  {
    title: "Tube Settler",
    description:
      "โครงการโรงผลิตน้ำประปาสามเสน กรุงเทพมหานคร ขนาด (ก.×ย.×ส.) 100 x 25 x 75 ซม.",
    image: (await imagesProject[path + "tube_settler.jpg"]()).default,
  },
  {
    title: "Tube Settler",
    description: "สีฟ้า ขนาด ยาว 3 เมตร 24 ก้อน และ ยาว 2.40 เมตร 144 ก้อน",
    image: (await imagesProject[path + "tube_settler2.jpg"]()).default,
  },
  {
    title: "Drift Eliminator รุ่น Blade type",
    description: "ขนาด เส้นผ่านศูนย์กลาง 178 เซนติเมตร",
    image: (await imagesProject[path + "drift_eliminator.jpg"]()).default,
  },
  {
    title: "Cross flow media และ fin filter",
    description: "สำหรับบำบัดตะกอนในบ่อปลาคราฟ",
    image: (await imagesProject[path + "cross_flow_media_fin_filter.jpg"]())
      .default,
  },
];

// console.log(projects)

// projects.forEach(async (item, index) => {
//   item["image"] = (await imagesProject[index]()).default;
// });
// console.log(projects);
---

<Layout title="Contact">
  <Container>
    <Sectionhead>
      <Fragment slot="title">ผลงานของเรา</Fragment>
      <!-- <Fragment slot="desc"></Fragment> -->
    </Sectionhead>

    <div class="py-8">
      <div class="grid md:grid-cols-3 gap-10 mx-auto max-w-screen-lg mt-12">
        {
          projects.map((item) => (
            <div>
              <div
                class="image-block flex justify-center items-center hover:transform hover:scale-105 transition-transform"
                data-url={item.image.src}>
                {item.image && (
                  <Image
                    src={item.image}
                    alt={item.image.src}
                    height={375}
                    width={500}
                    loading={"eager"}
                    class="rounded-lg cursor-pointer image-click"
                  />
                )}
              </div>
              <h2 class="font-medium text-2xl text-gray-800 text-center mt-4">
                {item.title}
              </h2>
              <p class="text-lg leading-relaxed text-slate-500 mt-3">
                {item.description}
              </p>
            </div>
          ))
        }
      </div>
    </div>
    <dialog id="imageDialogRoot">
      <img src="" alt="" id="imageModal" class="w-full h-full" />
      <button id="closeDialog">X</button>
    </dialog>
  </Container>
</Layout>

<script>
  const imageDialogRoot = document.getElementById(
    "imageDialogRoot"
  ) as HTMLDialogElement;
  const imageModal = document.getElementById("imageModal") as HTMLImageElement;
  const closeDialog = document.getElementById(
    "closeDialog"
  ) as HTMLButtonElement;
  const imageBlocks = document.querySelectorAll(".image-block");

  imageDialogRoot.addEventListener("click", (e) => {
    console.log(e.target);
    if (e.target === imageDialogRoot) {
      closeDialogHandler();
    }
  });

  for (const imageBlock of imageBlocks) {
    imageBlock.addEventListener("click", (e) => {
      if (!e.target) return;
      const url = imageBlock.getAttribute("data-url");
      openDialog(url);
    });
  }

  function openDialog(src) {
    if (imageModal && imageDialogRoot) {
      imageModal.src = src;
      imageDialogRoot.showModal();
      requestAnimationFrame(() => imageDialogRoot.classList.add("fadein"));
    }
  }

  closeDialog.addEventListener("click", closeDialogHandler);

  function closeDialogHandler() {
    if (imageDialogRoot) {
      imageDialogRoot.classList.add("fadeout");
    }
  }

  imageDialogRoot.addEventListener("animationend", (evt) => {
    console.log(evt);
    if (evt.animationName === "fadeout") {
      imageDialogRoot.classList.remove("fadeout");
      imageDialogRoot.close();
    }
  });
</script>

<style scoped>
  dialog {
    position: fixed;
    inset: 0 0 0 0;
    margin: auto;
    background: #f9f9f9;
    height: 100%;
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
  }

  #closeDialog {
    position: absolute;
    top: 0;
    right: 0;
    padding: 0.5rem 1rem;
    background: #333;
    color: white;
    border: none;
    cursor: pointer;
  }

  .fadein {
    animation: fadein 0.25s ease-in forwards;
  }

  .fadeout {
    animation: fadeout 0.25s ease-in forwards;
  }

  @keyframes fadein {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  @keyframes fadeout {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  @media screen and (max-width: 640px) {
    dialog {
      height: fit-content;
    }
  }
</style>
